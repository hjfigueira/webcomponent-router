{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/helpers.js","webpack:///./src/core/app-bootstrap.js","webpack:///./src/core/app-core.js","webpack:///./src/core/app-router.js","webpack:///./src/pages/conversationList.js","webpack:///./src/pages/conversationSingle.js","webpack:///./src/pages/conversationSingleNoSub.js","webpack:///./src/pages/conversationSub.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;ACjFe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;;AAEP;;AAEA;;AAEO;AACP;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AC1RA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACuB;AACJ;AACe;;AAE1E,iBAAiB,6DAAE;AACnB;AACA;AACA,UAAU,kEAAgB;AAC1B,yBAAyB,oEAAkB;AAC3C,4BAA4B,yEAAuB;AACnD;;AAEA,iC;;;;;;;;;;;;ACbA;AAAA;AAAA;AAA0C;AACM;;;;;;;;;;;;;ACDhD;AAAA;AAAkD;;AAElD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAsB,kEAAQ;AAC9B,2BAA2B,6DAAE;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,CAAC,E;;;;;;;;;;;;AClVD;AAAA;AAAA;AAAwC;AACM;;AAE/B,+BAA+B,2DAAQ;;AAEtD;AACA;AACA,sBAAsB,6DAAE;AACxB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA,uBAAuB,6DAAE;AACzB;AACA;AACA;AACA;;AAEA;;AAEA,C;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAAA;AAAwC;AACM;AACK;;AAEpC,iCAAiC,2DAAQ;;AAExD;AACA;AACA,mBAAmB,6DAAE;AACrB;AACA;AACA;;AAEA;;AAEA,oBAAoB,6DAAE;AACtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,+BAA+B,6DAAE;AACjC;AACA;;AAEA,4BAA4B,6DAAE;AAC9B;AACA;;AAEA,2BAA2B,6DAAE;AAC7B;AACA;;AAEA,aAAa;;;AAGb,0BAA0B,6DAAE;AAC5B;AACA;AACA,oCAAoC,2DAAe;AACnD;;AAEA;AACA;;AAEA,C;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAwC;AACM;;AAE/B,sCAAsC,2DAAQ;;AAE7D;AACA;AACA,sBAAsB,6DAAE;AACxB;AACA;AACA;AACA;;AAEA;;AAEA,C;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAwC;AACM;;AAE/B,8BAA8B,2DAAQ;;AAErD;AACA;AACA,sBAAsB,6DAAE;AACxB;AACA;AACA;AACA;;AAEA;;AAEA,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/core/app-core.js\");\n","\nexport default function register(tagName, className, extraConfig)\n{\n    tagName = tagName.replace(new RegExp('[^a-z|A-Z|0-9|\\-]','g'),'');\n    if(!window.customElements.get(tagName))\n    {\n        console.log('registering element '+tagName);\n        window.customElements.define(tagName, className, extraConfig);\n    }\n    return tagName;\n}\n\n// export function ce(tagName, config, content)\n// {\n//     let el = document.createElement(tagName);\n//\n//     if(!!config) {\n//\n//         if (!!config['class']) {\n//             el.classList.add(...config['class'].split(' '))\n//         }\n//         if (!!config['id']) {\n//             el.id = config['id'];\n//         }\n//         if (!!content) {\n//\n//             let element;\n//\n//             if (typeof content === \"function\") {\n//                 element = content();\n//             } else {\n//                 element = content;\n//             }\n//\n//             el.append(element);\n//         }\n//     }\n//\n//     return el;\n// }\n\nexport function component(tagName, className, extraConfig)\n{\n    return register(tagName, className, extraConfig);\n}\n\nexport function router(routerName, extraData){\n\n    return document.getElementById(routerName);\n\n}\n\nexport class BasePage extends HTMLElement\n{\n\n    constructor()\n    {\n        super();\n        this.attachShadow({mode:'open'});\n    }\n\n    connectedCallback(){\n        this.render();\n    }\n\n    append(params){\n        this.shadowRoot.append(params);\n    }\n\n}\n\nexport function ce(tag, config)\n{\n\n    let el = document.createElement(tag);\n    BaseElement(el,config);\n    return el;\n}\n\nfunction BaseElement(el, config){\n\n    el.structChildren = [];\n    el.references = [];\n    el.selfReference = null;\n    el.config = config;\n\n    el.parse = function()\n    {\n        let classList = [];\n\n        if(!!this.config)\n        {\n            let elements = this.config.split('.');\n            let firstChar = elements[0].charAt(0);\n            classList = elements.splice(1);\n            this.classList = classList;\n\n            if( firstChar === '#')\n            {\n                this.id = elements[0].substr(1);\n            }\n        }\n\n        return this;\n    };\n\n    el.html = function(...children)\n    {\n        this.structChildren = this.structChildren.concat(children);\n\n        for(let index in this.structChildren)\n        {\n            let item = this.structChildren[index].clone();\n\n            if(!!item.selfReference)\n            {\n                this.references[item.selfReference] = item;\n            }\n\n            this.append(item);\n        }\n\n        return this;\n    };\n\n    el.text = function(string)\n    {\n        this.innerText = string;\n        return this;\n    };\n\n    el.var = function(identifier)\n    {\n        this.selfReference = identifier;\n        return this;\n    };\n\n    el.ref = function(identifier)\n    {\n        if(this.references.hasOwnProperty(identifier))\n        {\n            return this.references[identifier];\n        }\n        else{\n            return false\n        }\n    };\n\n    el.clone = function()\n    {\n        let clone = this.cloneNode(true);\n\n        BaseElement(clone,this.config);\n\n        return clone\n    };\n\n    el.parse();\n}\n\nexport function block(tag, config)\n{\n    return new BlockBuilder(tag, config);\n}\n\nclass BaseBuilder {\n\n    constructor(tag, idClass)\n    {\n        this.node = this.parse(tag, idClass);\n    }\n\n    parse(tag, idClass)\n    {\n        let node = document.createElement(tag);\n        let classList = [];\n\n        if(!!idClass)\n        {\n            let elements = idClass.split('.');\n            let firstChar = elements[0].charAt(0);\n            classList = elements.splice(1);\n            node.classList = classList;\n\n            if( firstChar === '#')\n            {\n                node.id = elements[0];\n            }\n        }\n\n        return node;\n    }\n\n}\n\nclass BlockBuilder extends BaseBuilder{\n\n    constructor(tag, idClass)\n    {\n        super(tag, idClass);\n        this.children = [];\n        this.variables = {};\n\n    }\n\n    html(...children)\n    {\n        this.children = this.children.concat(children);\n        return this;\n    }\n\n    appendChildren()\n    {\n        for(let childIndex in this.children)\n        {\n            let child = this.children[childIndex];\n\n            if(child instanceof ElementBuilder)\n            {\n                // child.appendChildren();\n                this.node.append(child.node);\n            }\n            else{\n                this.node.append(child)\n            }\n\n        }\n\n        return this.node;\n    }\n\n    render()\n    {\n        this.appendChildren();\n        return this.node;\n    }\n\n    loadReferences()\n    {\n        for(let childIndex in this.children)\n        {\n            if(!!this.children[childIndex].reference)\n            {\n                let refString = this.children[childIndex].reference;\n                if(this.references.hasOwnProperty(refString))\n                {\n                    if(!this.references[refString].push)\n                    {\n                        this.reference[refString] = [this.reference[refString]];\n                    }\n\n                    this.references[refString].push(this.children[childIndex]);\n\n                }else{\n                    this.references[refString] = this.children[childIndex];\n                }\n            }\n        }\n        return this;\n    }\n}\n\nclass ElementBuilder extends HTMLElement{\n\n\n    var(reference)\n    {\n        this.reference = reference;\n        return this;\n    }\n\n    text(string)\n    {\n        this.node.innerText = string;\n        return this;\n    }\n\n    toString()\n    {\n        return this.node;\n    }\n\n}\n\n","import {ce} from \"../assets/helpers.js\";\nimport ConversationSingle from \"../pages/conversationSingle.js\"\nimport ConversationList from \"../pages/conversationList.js\"\nimport ConversationSingleNoSub from \"../pages/conversationSingleNoSub.js\";\n\nlet mainRouter = ce('app-router');\nmainRouter.id = 'mainRouter';\nmainRouter.states = {\n    '/' : ConversationList,\n    '/conversation/.*' : ConversationSingle,\n    '/conversation-nosub' : ConversationSingleNoSub,\n};\n\ndocument.body.append(mainRouter);","import * as router from './app-router.js';\nimport * as bootstrap from './app-bootstrap.js';\n","import register, {ce} from \"../assets/helpers.js\";\n\nwindow.customElements.define('app-router', class extends HTMLElement {\n\n    constructor()\n    {\n        super();\n        this.settings = {};\n        this.routes = false;\n        this.routerReference = null;\n        this.lastState = null;\n\n        this.loadSettings();\n\n    }\n\n    connectedCallback()\n    {\n        this.registerEvents();\n        this.doRoute();\n    }\n\n    disconnectedCallback()\n    {\n        this.unregisterEvents();\n    }\n\n    get id() {\n        return this.getAttribute('id');\n    }\n\n    set id(id) {\n        if (id) {\n            this.setAttribute('id', '');\n        } else {\n            this.removeAttribute('id');\n        }\n    }\n\n    set states(routes) {\n        this.routes = routes;\n        this.prepareRoutes();\n    }\n\n    get states(){\n        return this.routes;\n    }\n\n\n    prepareRoutes()\n    {\n        Object.defineProperties(this.routes, {\n            state: {\n                value: {\n                    id: '',\n                    params: {},\n                    url: null,\n                    content: null\n                }\n            },\n            setRoute: {\n                value: (url) => {\n\n                    // Bail if there's no URL\n                    if (!url) return;\n\n                    var pathOnlyUrl = url.split(/\\/?\\?/)[0];\n\n                    // Get the route state\n                    var state = this.getRouteFromPath(pathOnlyUrl);\n                    if (!state) return;\n                    this.routes.state.id = state.id;\n                    this.routes.state.params = this.getParams(url);\n                    this.routes.state.url = state.url;\n                    this.routes.state.content = state.content;\n                    return this.routes.state;\n                }\n            },\n            push: {\n                value: () => {\n                    if (this.settings.forceReload) {\n                        if (window.location.href === this.routes.state.url) return;\n                        window.location.href = this.routes.state.url;\n                    }\n\n                    if (!history.pushState) return;\n\n                    // Update the page title\n                    document.title = (this.routes[this.routes.state.id] && this.routes[this.routes.state.id].title ? this.routes[this.routes.state.id].title : '') + this.settings.title;\n\n                    // Don't run if already current page\n                    if (history.state && history.state.url && history.state.url === this.routes.state.url) return;\n                    history.pushState(\n                        this.routes.state,\n                        (this.routes[this.routes.state.id] && this.routes[this.routes.state.id].title ? this.routes[this.routes.state.id].title : '') + this.settings.title,\n                        this.routes.state.url\n                    );\n                }\n            },\n            replace: {\n                value: () => {\n                    if (!history.replaceState) return;\n\n                    // Update the page title\n                    document.title = (this.routes[this.routes.state.id] && this.routes[this.routes.state.id].title ? this.routes[this.routes.state.id].title : '') + this.settings.title;\n\n                    // Don't run if already current page\n                    if (history.state && history.state.url && history.state.url === this.routes.state.url) return;\n                    history.pushState(\n                        this.routes.state,\n                        (this.routes[routes.state.id].title ? this.routes[this.routes.state.id].title : '') + this.settings.title,\n                        this.routes.state.url\n                    );\n                }\n            },\n            route: {\n                value: (url) => {\n                    if (!url) return;\n                    this.routes.setRoute(url);\n                    return this.routes.state;\n                }\n            }\n        });\n    }\n\n    loadSettings(options)\n    {\n        let settings = {\n            title: '',\n            onpopstate: true,\n            forceReload: !(history.pushState),\n        };\n\n        // Shallow merge new properties into settings object\n        for (var key in options) {\n            if (options.hasOwnProperty(key)) {\n                settings[key] = options[key];\n            }\n        }\n\n        this.settings = settings;\n    }\n\n    /**\n     * Get the URL parameters\n     * source: https://css-tricks.com/snippets/javascript/get-url-variables/\n     * @param  {String} url The URL\n     * @return {Object}     The URL parameters\n     */\n    getParams(url)\n    {\n        var params = {};\n        var query = url.substring(1);\n        var parts = query.split('?');\n        var vars = [];\n\n        if(parts[1]){\n            vars = parts[1].split('&');\n        }\n\n        for (var i=0; i < vars.length; i++) {\n            var pair = vars[i].split(\"=\");\n            params[pair[0]] = decodeURIComponent(pair[1]);\n        }\n        return params;\n    };\n\n    /**\n     * Parse a URL pathname for variables\n     * @param  {String} pattern The pattern to match\n     * @param  {String} url     The pathname to parse\n     * @return {Object}         Details from the pathname\n     */\n    parsePathname(pattern, url)\n    {\n        // Variables\n        let map = {};\n        let keys = [];\n        let matches = false;\n        let oldUrl = url;\n        let oldPattern = pattern;\n\n        // If the URL is an exact match for the pattern, return it\n        if (url === pattern || url + '/' === pattern) {\n            return {\n                id: pattern,\n                params: {},\n                url: url,\n                content: this.getContent(oldUrl)\n            };\n        }\n\n        // Add a trailing slash to the URL if one is missing\n        url = url.slice(-1) === '/' ? url : url + '/';\n\n        // Push variables in the pattern to our key array and replace them with regex match grouping\n        var newPattern = pattern.replace('(*)', '.+?').replace(/\\(:.+?\\)/g, function(match) {\n            var key = match.slice(2, -1);\n            keys.push(key);\n            return '([^/]*)';\n        });\n\n        // Test the URL against the pattern.\n        // If it's a match, pull the variables out into the map\n        newPattern = newPattern.replace(new RegExp('\\/','g'),'\\\\/');\n        var test = url.replace(new RegExp('^' + newPattern + '$'), function() {\n            matches = true;\n            for (var i = 0; i < keys.length; i++) {\n                map[keys[i]] = arguments[i+1];\n            }\n        });\n\n        // Return the data\n        return {\n            id: (matches ? pattern : null),\n            params: map,\n            url: url,\n            content: this.getContent(oldPattern)\n        };\n    };\n\n    getContent(url)\n    {\n        return  this.routes[url];\n    }\n\n    /**\n     * Get the route state from query strings\n     * @param  {String} url The URL\n     * @return {Object}     The route state\n     */\n    getRouteFromQuery(url)\n    {\n        // Get the query string parameters and the page id\n        var params = this.getParams(url);\n        var id = params[this.settings.key] ? params[this.settings.key].toLowerCase() : '';\n\n        // If route has redirect, call setRoute with redirect URL\n        if (this.routes[id] && this.routes[id].redirect) {\n            this.routes.setRoute(routes[id].redirect);\n            return;\n        }\n\n        return {\n            id: this.routes[id] ? id : 404,\n            params: params,\n            url: url\n        };\n    };\n\n    /**\n     * Get a route state from a pathname\n     * @param  {String} url The URL\n     * @return {Object}     The route state\n     */\n    getRouteFromPath(url)\n    {\n        // Make URL case-insensitive\n        url = url.toLowerCase();\n\n        // Loop through each route and test against URL\n        for (var route in this.routes) {\n            if (this.routes.hasOwnProperty(route)) {\n                var parsed = this.parsePathname(route, url);\n                if (parsed.id) {\n                    return parsed;\n                }\n            }\n        }\n\n        // Otherwise return 404\n        return {\n            id: 404,\n            params: {},\n            url: url,\n            content : null\n        };\n\n    };\n\n    loadPage()\n    {\n        let identifier = this.routes.state.id;\n\n        if(typeof identifier == 'string')\n        {\n            if (identifier === '/') {\n                identifier = 'root'\n            }\n            if (identifier.charAt(0) === '/') {\n                identifier = identifier.substr(1)\n            }\n        }\n\n        let needsChange = false;\n        if(this.lastState != identifier){\n            this.lastState = identifier;\n            needsChange = true;\n        }\n\n        if(identifier !== 404 && needsChange){\n\n            console.log('pageload');\n            let tagname = 'page-'+identifier;\n            tagname = register(tagname, this.routes.state.content);\n            let template = ce(tagname);\n            this.innerHTML = '';\n            this.append(template);\n\n        }\n    }\n\n    doRoute()\n    {\n        if(!this.routes){\n            console.log('set property states do define routes');\n            return;\n        }\n\n        let url = window.location.hash.replace('#','');\n        if(!url){ url = '/';}\n        this.routes.route(url);\n        this.loadPage();\n        console.log('router '+this.id+' routing to '+url);\n    }\n\n    registerEvents()\n    {\n        this.routerReference = this.doRoute.bind(this);\n        window.addEventListener('popstate', this.routerReference, false);\n    }\n\n    unregisterEvents()\n    {\n        window.removeEventListener('popstate', this.routerReference, false);\n    }\n\n\n});","import {ce} from \"../assets/helpers.js\";\nimport {BasePage} from \"../assets/helpers.js\";\n\nexport default class ConversationList extends BasePage{\n\n    render()\n    {\n        let content = ce('a');\n        content.innerText = 'Conversation List #1';\n        content.setAttribute(\"href\",\"#/conversation/?id=1\");\n        content.style.display = 'block';\n        this.shadowRoot.appendChild(content);\n\n        let content2 = ce('a');\n        content2.innerText = 'Conversation List #2 NO SUB';\n        content2.setAttribute(\"href\",\"#/conversation-nosub/?id=2\");\n        content2.style.display = 'block';\n        this.shadowRoot.appendChild(content2);\n\n        let content3 = ce('a');\n        content3.innerText = 'Conversation List #3 SUB DIRECT';\n        content3.setAttribute(\"href\",\"#/conversation/inner/?id=3\");\n        content3.style.display = 'block';\n        this.shadowRoot.appendChild(content3);\n\n        let content4 = ce('a');\n        content4.innerText = 'Conversation List #4';\n        content4.setAttribute(\"href\",\"#/conversation/?id=4\");\n        content4.style.display = 'block';\n        this.shadowRoot.appendChild(content4);\n\n        let content5 = ce('a');\n        content5.innerText = 'Conversation List #5';\n        content5.setAttribute(\"href\",\"#/conversation/?id=5\");\n        content5.style.display = 'block';\n        this.shadowRoot.appendChild(content5);\n\n        let content6 = ce('a');\n        content6.innerText = 'Conversation List #6';\n        content6.setAttribute(\"href\",\"#/conversation/?id=6\");\n        content6.style.display = 'block';\n        this.shadowRoot.appendChild(content6);\n\n        let content7 = ce('a');\n        content7.innerText = 'Conversation List #7';\n        content7.setAttribute(\"href\",\"#/conversation/?id=7\");\n        content6.style.display = 'block';\n        this.shadowRoot.appendChild(content7);\n\n        let content8 = ce('a');\n        content8.innerText = 'Conversation List #8';\n        content8.setAttribute(\"href\",\"#/conversation/?id=8\");\n        content8.style.display = 'block';\n        this.shadowRoot.appendChild(content8);\n\n    }\n\n}","import {ce} from \"../assets/helpers.js\";\nimport {BasePage} from \"../assets/helpers.js\";\nimport ConversationSub from \"./conversationSub.js\";\n\nexport default class ConversationSingle extends BasePage{\n\n    render()\n    {\n        let nome = ce('a');\n        nome.innerText = 'Conversation Single';\n        nome.setAttribute(\"href\",\"#/\");\n        nome.style.display = 'block';\n\n        this.append(nome);\n\n        let inner = ce('a');\n        inner.innerText = 'Conversation Inner';\n        inner.setAttribute(\"href\",\"#/conversation/inner\");\n        inner.style.display = 'block';\n\n        this.append(inner);\n\n        firebase.database()\n            .ref('/users/1112')\n            .once('value')\n            .then((data) => {\n\n                let dados = data.val();\n\n                let username = ce('div');\n                username.innerText = dados.username;\n                this.append(username);\n\n                let email = ce('div');\n                email.innerText = dados.email;\n                this.append(email);\n\n                let wawa = ce('div');\n                wawa.innerText = dados.wawa;\n                this.append(wawa);\n\n            });\n\n\n        let innerRouter = ce('app-router');\n        innerRouter.id = 'InnerRouter';\n        innerRouter.states = {\n            '/conversation/inner' : ConversationSub\n        };\n\n        this.append(innerRouter);\n    }\n\n}","import {ce} from \"../assets/helpers.js\";\nimport {BasePage} from \"../assets/helpers.js\";\n\nexport default class ConversationSingleNoSub extends BasePage{\n\n    render()\n    {\n        let content = ce('a');\n        content.innerText = 'NO SUB Sub #1';\n        content.setAttribute(\"href\",\"#/\");\n        content.style.display = 'block';\n        this.shadowRoot.appendChild(content);\n\n    }\n\n}","import {ce} from \"../assets/helpers.js\";\nimport {BasePage} from \"../assets/helpers.js\";\n\nexport default class ConversationSub extends BasePage{\n\n    render()\n    {\n        let content = ce('span');\n        content.innerText = 'Sub #1';\n        // content.setAttribute(\"href\",\"#/conversation/?id=1\");\n        content.style.display = 'block';\n        this.shadowRoot.appendChild(content);\n\n    }\n\n}"],"sourceRoot":""}